package pages

import (
	"fmt"
	"github.com/nats-tower/nats-tower/application"
	"github.com/nats-tower/nats-tower/interfaces/web/utils"
	"github.com/nats-tower/nats-tower/interfaces/web/views/layouts"
	"github.com/pocketbase/pocketbase/core"
)

type UsersModel struct {
	RequestEvent *core.RequestEvent
	Installation *application.OperatorAuth
	Account      *application.AccountAuth
	Users        []*application.UserAuth
}

templ Users(m UsersModel) {
	<div class="page-wrapper">
		<div class="container-xl">
			<div class="page-header">
				<div class="row row-cards">
					<div class="col">
						<div class="row row-cards">
							<div class="col-auto">
								<a
									href={ templ.SafeURL(fmt.Sprintf("/ui/installations/%s/accounts/%s", m.Installation.ID, m.Account.ID)) }
									hx-get={ fmt.Sprintf("/ui/installations/%s/accounts/%s", m.Installation.ID, m.Account.ID) }
									hx-push-url="true"
									hx-target="#content"
								>
									<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="icon icon-tabler icons-tabler-outline icon-tabler-arrow-back-up"><path stroke="none" d="M0 0h24v24H0z" fill="none"></path><path d="M9 14l-4 -4l4 -4"></path><path d="M5 10h11a4 4 0 1 1 0 8h-1"></path></svg>
								</a>
							</div>
							<div class="col">
								<h2 class="page-title">
									Users
								</h2>
								<div class="page-pretitle">
									Manage access to account '{ m.Account.Name }' on '{ m.Installation.Description }'
								</div>
							</div>
							<div class="col-auto">
								<a
									class="btn btn-6 btn-primary w-100 btn-icon"
									href="#"
									data-bs-toggle="modal"
									data-bs-target="#add-user-modal"
								>
									<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="icon icon-tabler icons-tabler-outline icon-tabler-users-plus"><path stroke="none" d="M0 0h24v24H0z" fill="none"></path><path d="M5 7a4 4 0 1 0 8 0a4 4 0 0 0 -8 0"></path><path d="M3 21v-2a4 4 0 0 1 4 -4h4c.96 0 1.84 .338 2.53 .901"></path><path d="M16 3.13a4 4 0 0 1 0 7.75"></path><path d="M16 19h6"></path><path d="M19 16v6"></path></svg>
								</a>
							</div>
						</div>
						<div class="card mt-2">
							<div class="list-group list-group-flush">
								for _, user := range m.Users {
									<button
										class="list-group-item"
									>
										<div class="row align-items-center">
											<div class="col text-truncate">
												<div class="text-reset d-block">{ user.Name }</div>
												if user.Description == "" {
													<div class="d-block text-secondary text-truncate mt-n1">
														no description
													</div>
												} else {
													<div class="d-block text-secondary text-truncate mt-n1">
														{ user.Description }
													</div>
												}
											</div>
											<div class="col-auto">
												<a
													class="btn btn-6 w-100 btn-icon btn-primary"
													data-bs-toggle="modal"
													data-bs-target="#credentials-user-modal"
													hx-get={ fmt.Sprintf("/ui/installations/%s/accounts/%s/users/%s/credentials", m.Installation.ID, m.Account.ID, user.ID) }
													hx-target="#credentials-user-modal"
													hx-push-url="false"
													hx-trigger="click consume"
												>
													<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="currentColor" class="icon icon-tabler icons-tabler-filled icon-tabler-key"><path stroke="none" d="M0 0h24v24H0z" fill="none"></path><path d="M14.52 2c1.029 0 2.015 .409 2.742 1.136l3.602 3.602a3.877 3.877 0 0 1 0 5.483l-2.643 2.643a3.88 3.88 0 0 1 -4.941 .452l-.105 -.078l-5.882 5.883a3 3 0 0 1 -1.68 .843l-.22 .027l-.221 .009h-1.172c-1.014 0 -1.867 -.759 -1.991 -1.823l-.009 -.177v-1.172c0 -.704 .248 -1.386 .73 -1.96l.149 -.161l.414 -.414a1 1 0 0 1 .707 -.293h1v-1a1 1 0 0 1 .883 -.993l.117 -.007h1v-1a1 1 0 0 1 .206 -.608l.087 -.1l1.468 -1.469l-.076 -.103a3.9 3.9 0 0 1 -.678 -1.963l-.007 -.236c0 -1.029 .409 -2.015 1.136 -2.742l2.643 -2.643a3.88 3.88 0 0 1 2.741 -1.136m.495 5h-.02a2 2 0 1 0 0 4h.02a2 2 0 1 0 0 -4"></path></svg>
												</a>
											</div>
											if user.Name != "sys" {
												<div class="col-auto">
													<a
														class="btn btn-6 w-100 btn-icon btn-danger"
														data-bs-toggle="modal"
														data-bs-target="#delete-user-modal"
														hx-get={ fmt.Sprintf("/ui/installations/%s/accounts/%s/users/%s/delete", m.Installation.ID, m.Account.ID, user.ID) }
														hx-target="#delete-user-modal"
														hx-push-url="false"
														hx-trigger="click consume"
													>
														<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="icon icon-tabler icons-tabler-outline icon-tabler-trash"><path stroke="none" d="M0 0h24v24H0z" fill="none"></path><path d="M4 7l16 0"></path><path d="M10 11l0 6"></path><path d="M14 11l0 6"></path><path d="M5 7l1 12a2 2 0 0 0 2 2h8a2 2 0 0 0 2 -2l1 -12"></path><path d="M9 7v-3a1 1 0 0 1 1 -1h4a1 1 0 0 1 1 1v3"></path></svg>
													</a>
												</div>
											}
										</div>
									</button>
								}
							</div>
						</div>
					</div>
					<div id="delete-user-modal" class="modal modal-blur fade" tabindex="-1" aria-hidden="true" style="display: none">
						<div class="modal-dialog modal-lg" role="document">
							<div class="modal-content"></div>
						</div>
					</div>
					<div id="add-user-modal" class="modal modal-blur fade" tabindex="-1" aria-hidden="true" style="display: none">
						@CreateUserModal(CreateUserModalModel{
							RequestEvent: m.RequestEvent,
							Installation: m.Installation,
							Account:      m.Account,
						})
					</div>
					<div id="credentials-user-modal" class="modal modal-blur fade" tabindex="-1" aria-hidden="true" style="display: none">
						<div class="modal-dialog modal-lg" role="document">
							<div class="modal-content"></div>
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>
	if !utils.RequestsFullPage(m.RequestEvent) {
		@layouts.Navigation(layouts.NavigationModel{
			CurrentLocation: "/ui/installations/" + m.Installation.ID + "/accounts/" + m.Account.ID + "/users",
			InstallationID:  m.Installation.ID,
			AccountID:       m.Account.ID,
			Swap:            true,
		})
	}
}

type DeleteUserModalModel struct {
	RequestEvent *core.RequestEvent
	Installation *application.OperatorAuth
	Account      *application.AccountAuth
	User         *application.UserAuth
}

templ DeleteUserModal(m DeleteUserModalModel) {
	<div class="modal-dialog modal-lg" role="document">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title">Delete user { m.User.Name } in account { m.Account.Name }</h5>
				<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
			</div>
			<div class="modal-body">
				<p>Are you sure you want to delete the user { m.User.Name }?</p>
			</div>
			<div class="modal-footer">
				<a href="#" class="btn btn-link link-secondary btn-3" data-bs-dismiss="modal">
					Cancel
				</a>
				<a
					href="#"
					class="btn btn-primary btn-5 ms-auto"
					data-bs-dismiss="modal"
					hx-delete={ fmt.Sprintf("/ui/installations/%s/accounts/%s/users/%s", m.Installation.ID, m.Account.ID, m.User.ID) }
					hx-target="#content"
				>
					<!-- Download SVG icon from http://tabler.io/icons/icon/plus -->
					<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="icon icon-tabler icons-tabler-outline icon-tabler-trash"><path stroke="none" d="M0 0h24v24H0z" fill="none"></path><path d="M4 7l16 0"></path><path d="M10 11l0 6"></path><path d="M14 11l0 6"></path><path d="M5 7l1 12a2 2 0 0 0 2 2h8a2 2 0 0 0 2 -2l1 -12"></path><path d="M9 7v-3a1 1 0 0 1 1 -1h4a1 1 0 0 1 1 1v3"></path></svg>
					Delete user
				</a>
			</div>
		</div>
	</div>
}

type CreateUserModalModel struct {
	RequestEvent *core.RequestEvent
	Installation *application.OperatorAuth
	Account      *application.AccountAuth
}

templ CreateUserModal(m CreateUserModalModel) {
	<div class="modal-dialog modal-lg" role="document">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title">Create user for account { m.Account.Name } on { m.Installation.Description }</h5>
				<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
			</div>
			<div class="modal-body">
				<form
					hx-post={ fmt.Sprintf("/ui/installations/%s/accounts/%s/users", m.Installation.ID, m.Account.ID) }
					hx-target="#content"
				>
					<div class="mb-3">
						<label class="form-label">Name</label>
						<input
							type="text"
							class="form-control"
							name="name"
							required
						/>
					</div>
					<div class="mb-3">
						<label class="form-label">Description</label>
						<input
							type="text"
							class="form-control"
							name="description"
						/>
					</div>
					<div class="modal-footer">
						<a href="#" class="btn btn-link link-secondary btn-3" data-bs-dismiss="modal">
							Cancel
						</a>
						<button
							type="submit"
							class="btn btn-primary btn-5 ms-auto"
						>
							Create user
						</button>
					</div>
				</form>
			</div>
		</div>
	</div>
}

type UserCredentialsModalModel struct {
	RequestEvent *core.RequestEvent
	User         *application.UserAuth
}

templ UserCredentialsModal(m UserCredentialsModalModel) {
	<div class="modal-dialog modal-lg" role="document">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title">User credentials for user '{ m.User.Name }'</h5>
				<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
			</div>
			<div class="modal-body">
				@CopyCodeBlock(CopyCodeBlockModel{
					ID:          "user-jwt",
					Code:        m.User.JWT,
					Title:       "User JWT",
					Description: "Use this together with the seed to authenticate.",
				})
				@CopyCodeBlock(CopyCodeBlockModel{
					ID:          "user-seed",
					Code:        m.User.Seed,
					Title:       "User Seed",
					Description: "Use this together with the JWT above to authenticate.",
				})
				@CopyCodeBlock(CopyCodeBlockModel{
					ID:          "user-creds",
					Code:        m.User.Creds,
					Title:       "User Creds",
					Description: "Copy this to a file and use it to authenticate.",
				})
				@CopyCodeBlock(CopyCodeBlockModel{
					ID:          "cli-command",
					Code:        fmt.Sprintf("nats --server %s --creds nats.creds stream ls", m.User.URL),
					Title:       "CLI command",
					Description: "Use this command to connect to the NATS server. Replace 'nats.creds' with the path to the credentials file.",
				})
			</div>
		</div>
	</div>
}

type CopyCodeBlockModel struct {
	ID          string
	Code        string
	Title       string
	Description string
}

templ CopyCodeBlock(m CopyCodeBlockModel) {
	<div class="my-4">
		<div class="row">
			<div class="col">
				<h3 class="text-secondary">
					{ m.Title }
				</h3>
				<div class="text-secondary">
					{ m.Description }
				</div>
			</div>
			<div class="col-auto">
				<button
					class="btn btn-6 w-100 btn-icon"
					a
					ria-label="Copy code"
					hx-on:click={ templ.JSFuncCall("copyTextToClipboard", m.ID) }
				>
					<svg xmlns="http://www.w3.org/2000/svg" class="icon icon-tabler icon-tabler-clipboard icon" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round"><path d="M9 5h-2a2 2 0 0 0 -2 2v12a2 2 0 0 0 2 2h10a2 2 0 0 0 2 -2v-12a2 2 0 0 0 -2 -2h-2"></path><path d="M9 3m0 2a2 2 0 0 1 2 -2h2a2 2 0 0 1 2 2v0a2 2 0 0 1 -2 2h-2a2 2 0 0 1 -2 -2z"></path></svg>
				</button>
			</div>
		</div>
		<pre class="border-0 mt-1">
			<code style="white-space: pre;" id={ m.ID }>
				{ m.Code }
			</code>
		</pre>
	</div>
}
